<?xml version="1.0" encoding="ISO-8859-1"?>

<testcases
    profile="SIMPLE PARSER TESTS"
    default-lang="O1 O2 AO">

    <test id="baseline1" type="reject" file="HOTBaselineReject1.Mod">
        Test file is <em>completely</em> empty.  The compiler should
        reject this invalid module.
    </test>
    
    <test id="baseline2" type="accept" file="HOTBaselineAccept1.Mod">
        Test case is an empty <code>MODULE</code>; such a module is
        useless, but technically legal.  The compiler should accept it.
    </test>
    
    <test id="baseline3" type="error" file="HOTBaselineError1.Mod">
      Module body has a single statement: <code>ASSERT(FALSE)</code>.
      The module should compile, and it should be possible to execute
      the exported procedure, but evaluation should raise an exception.
    </test>
    
    <test id="baseline4" type="run" file="HOTBaselineRun1.Mod">
      Module with a single, empty, procedure <code>Test</code>.  The
      module should compile and evaluate fine, but does not do anything
      at all.
    </test>
    
    <test id="empty2" type="accept" file= "HOTEmpty2.Mod">
        Module with one global variable
    </test>

    <test id="empty3" type="accept" file="HOTEmpty3.Mod">
        Module with one procedure
    </test>
    
    <test id="empty4" type="accept" file="HOTEmpty4.Mod">
        Module with one global variable and one procedure
    </test>
    
    <test id="empty5" type="accept" file="HOTEmpty5.Mod">
        Module with one procedure with simple parameters
    </test>
    
    <test id="empty6" type="accept" file="HOTEmpty6.Mod">
        Module declaring variables with integer, set, char types
    </test>
    
    <test id="empty7" type="accept" file="HOTEmpty7.Mod">
        Module declaring variables with boolean types
    </test>

    <test id="empty8" type="accept" file="HOTEmpty8.Mod">
        Module declaring variables with real types
    </test>

    <test id="empty9" type="accept" file="HOTEmpty9.Mod">
        Module declaring numeric (integer and char) constants
    </test>
    
    <test id="empty10" type="reject" file= "HOTEmpty10.Mod">
        file with garbage
    </test>

    <test id="ident0" type="accept" file="HOTIdent0.Mod">
        test legal identifiers
    </test>

    <test id="ident1" type="reject" file="HOTIdent1.Mod">
        test illegal identifiers
    </test>
    
    <test id="dupl0" type="reject" file= "HOTDupl0.Mod">
        duplicate identifiers
    </test>
    
    <test id="dupl1" type="reject" file= "HOTDupl1.Mod">
        duplicate identifiers
    </test>

    <test id="dupl2" type="reject" file= "HOTDupl2.Mod">
        duplicate identifiers
    </test>

    <test id="dupl3" type="reject" file= "HOTDupl3.Mod">
        duplicate identifiers
    </test>

    <test id="export0" type="accept" file= "HOTExport0.Mod">
        export some variables
    </test>

    <test id="export1" type="run" file= "HOTExport1.Mod">
        import variables from export0
    </test>

    <test id="duplicateImport" type="reject" file= "HOTDoubleImport.Mod" >
        duplicate import
    </test>
    
    <test id="duplicateImport1" type="reject" file= "HOTDoubleImport1.Mod" >
        duplicate import
    </test>

    <test id="failedImport" type="reject" file= "HOTFailedImport.Mod" >
         failed import
    </test>

    <test id="baseline5" type="run" file="HOTBaselineOutput0.Mod" output="HOTBaselineOutput0.Ref">
      Module produces no output, and <code>HOTBaselineOutput0.Ref</code>
      is empty.
    </test>
  
    <test id="baseline6" type="run" file="HOTBaselineOutput1.Mod" output="HOTBaselineOutput1.Ref">
      Evaluation of the procedure <code>Test</code> prints the famous
      <code>Hello World!</code>, followed by a single newline character.
      Command execution should succeed, and the command's output should
      match the content of file <code>HOTBaselineOutput1.Ref</code>
      (with the exception of a possibly different newline character).
    </test>
  
    <test id="baseline8" type="run" relevance="informal" file="HOTBaselineOutput3.Mod" output="HOTBaselineOutput3.Ref">
      Tests integer output for <code>LONGINT</code>:
      padding, sign, alignment.
    </test>
    
    <test id="baseline10" type="run" file="HOTBaselineOutput5.Mod"
  	output="HOTBaselineOutput5.Ref">
      Tests character output.  Not much to test, though.
    </test>

</testcases>


<testcases
    profile="BUILT-IN TYPES"
    default-lang="O1 O2 AO">

    <test id="int0" type="run" file= "HOTInt0.Mod">
        test integer constants, conversions, operators
    </test>

    <test id="interr0" type="reject" file="HOTIntErr0.Mod">
        error LONGINT -> INTEGER
    </test>

    <test id="interr1" type="reject" file="HOTIntErr1.Mod">
        error LONGINT -> SHORTINT
    </test>

    <test id="interr2" type="reject" file="HOTIntErr2.Mod">
        error INTEGER -> SHORTINT
    </test>

    <test id="intpatterns0" type="run" file= "HOTIntPatterns0.Mod">
        usign integers. Some cases where strenght reduction could be used
        (but must be checked by hand)
    </test>

    <test id="intoldbugs" type="run" file= "HOTIntOldBugs.Mod">
        Old compiler bugs with integers. Make sure they are gone forever.
    </test>

    <test id="boolexpr0" type="run" file= "HOTBoolExpr0.Mod">
        Boolean Expressions
    </test>

    <test id="reals0" type="run" file= "HOTReals0.Mod">
        reals
    </test>

</testcases>

<testcases
    profile="RECORDS"
    default-lang="O1 O2 AO">

    <test id="record0" type="accept" file= "HOTRecord0.Mod">
        empty record declaration
    </test>

    <test id="record1" type="accept" file= "HOTRecord1.Mod">
        simple record declaration
    </test>

    <test id="record2" type="accept" file= "HOTRecord2.Mod">
        simple pointer to named record declaration
    </test>

    <test id="record3" type="accept" file= "HOTRecord3.Mod">
        using record fields
    </test>

    <test id="record4" type="run" file= "HOTRecord4.Mod">
        record access and copy
    </test>

    <test id="record5" type="run" file= "HOTRecord5.Mod">
        static record extension
    </test>

    <test id="record6" type="run" file= "HOTRecord6.Mod">
        dynamic record access
    </test>

    <test id="record7" type="run" file= "HOTRecord7.Mod">
        dynamic record extension
    </test>
    
    <test id="record8" type="accept" file= "HOTRecord8.Mod">
        records with size 0 are ofter big trouble-makers
    </test>
    
    <test id="recerr0" type="reject" file= "HOTRecErr0.Mod">
        name equivalence, not structure equivalence
    </test>

    <test id="recerr1" type="reject" file= "HOTRecErr1.Mod">
        invalid type declaration
    </test>

    <test id="recerr2" type="reject" file= "HOTRecErr2.Mod">
        invalid type declaration
    </test>

    <test id="recerr3" type="reject" file= "HOTRecErr3.Mod">
        invalid type declaration
    </test>

    <test id="recerr4" type="reject" file= "HOTRecErr4.Mod">
        invalid type declaration
    </test>

    <test id="recerr5" type="reject" file= "HOTRecErr5.Mod">
        invalid type declaration
    </test>

    <test id="recerr6" type="reject" file= "HOTRecErr6.Mod">
        invalid type declaration
    </test>
    
    <test id="recerr7" type="reject" file= "HOTRecErr7.Mod">
        invalid type declaration
    </test>

    <test id="recerr8" type="reject" file= "HOTRecErr8.Mod">
        invalid type declaration
    </test>

</testcases>


<testcases
    profile="ARRAYS"
    default-lang="O1 O2 AO">
    
    <test id="array0" type="run" file= "HOTArray0.Mod">
        single dimensional array festival
    </test>
    
    <test id="array2" type="reject" file="HOTArray2.Mod">
      Declares an array type of negative length.
    </test>

    <test id="string0" type="run" file= "HOTString0.Mod">
        string tests
    </test>

</testcases>


<testcases
    profile="PROCEDURE TYPES"
    default-lang="O1 O2 AO">

    <test id="proc0" type="accept" file= "HOTProc0.Mod">
        procedure variables: declaration, assignment, parameter passing
    </test>

    <test id="proc1" type="run" file= "HOTProc1.Mod">
        procedure variable test
    </test>

    <test id="proc2" type="run" file= "HOTProc2.Mod">
        procedure variable test
    </test>

    <test id="proc3" type="run" file= "HOTProc3.Mod">
        proc type returning a proc type, array of procedures
    </test>

    <test id="proc4" type="run" file= "HOTProc4.Mod">
        exporting proc types
    </test>

    <test id="proc4a" type="run" file= "HOTProc4A.Mod">
        importing proc types
    </test>

    <test id="proc5" type="run" file= "HOTProc5.Mod">
        exporting proc types
    </test>

    <test id="proc5a" type="run" file= "HOTProc5A.Mod">
        importing/reexporting proc types
    </test>

    <test id="proc5b" type="run" file= "HOTProc5B.Mod">
        importing proc types
    </test>

    <test id="procvar1" type="accept" relevance="informal" file="HOTProcVar1.Mod">
      If this test passes, then the compiler applies the same relaxed
      type rules to the comparison of procedure values as to the
      assignment of procedure values.
    </test>

</testcases>


<testcases
    profile="Accessing variables: import/export, local procedures"
    default-lang="O1 O2 AO">

    <test id="localprocs0" type="run" file= "HOTLocalProcs0.Mod">
        Accessing data from local procedures (uses static link)
    </test>

</testcases>


<testcases
    profile="Control structures"
    default-lang="O1 O2 AO">

    <test id="case0" type="run" file= "HOTCase0.Mod">
        case statement
    </test>

    <test id="loop0" type="run" file= "HOTLoop0.Mod">
        loop statement
    </test>

  <test id="with1" type="accept" lang="O1 O2 AO" file="HOTWITH1.Mod">
    Recursive call to a procedure from within a <code>WITH</code>
    statement.  At the place of the call, the <code>WITH</code> is
    applied to the procedure's argument.  Compilers that modify the
    external signature of the procedure for the duration of a
    <code>WITH</code> guard reject this test.
  </test>
  
</testcases>
    
<testcases
    profile="Built-In functions"
    default-lang="O1 O2 AO">

    <test id="builtInFunctions0" type="run" file= "HOTBuiltIn0.Mod">
        CAP CHR ODD ABS ASH
    </test>

  <test id="asherror0" type="reject" file="HOTBuiltinASHErr0.Mod">
    Invalid use of <code>ASH</code>.
  </test>
  <test id="asherror1" type="reject" file="HOTBuiltinASHErr1.Mod">
    Invalid use of <code>ASH</code>.
  </test>
  <test id="asherror2" type="reject" file="HOTBuiltinASHErr2.Mod">
    Invalid use of <code>ASH</code>.
  </test>
  <test id="asherror3" type="reject" file="HOTBuiltinASHErr3.Mod">
    Invalid use of <code>ASH</code>.
  </test>
  <test id="asherror4" type="reject" file="HOTBuiltinASHErr4.Mod">
    Invalid use of <code>ASH</code>.
  </test>

  <test id="cap1" type="run" file="HOTBuiltinCAP1.Mod">
    Tests <code>CAP</code> over the whole ASCII range, that is, for
    the character codes <code>0..127</code>.  Except for
    <code>a..z</code>, all characters should be mapped onto
    themselves.
  </test>
  <test id="cap2" type="run" file="HOTBuiltinCAP2.Mod">
    Tests <code>CAP</code> over the whole ISO Latin1 range
    <code>0..127</code>.  Except for characters that have a
    corresponding upper case letter in ISO Latin1, all characters
    should be mapped onto themselves.
  </test>
  <test id="caperror0" type="reject" file="HOTBuiltinCAPError0.Mod">
    Invalid uses of <code>CAP</code>.
  </test>
  <test id="caperror1" type="reject" file="HOTBuiltinCAPError1.Mod">
    Invalid uses of <code>CAP</code>.
  </test>
  <test id="caperror2" type="reject" file="HOTBuiltinCAPError2.Mod">
    Invalid uses of <code>CAP</code>.
  </test>
  <test id="caperror3" type="reject" file="HOTBuiltinCAPError3.Mod">
    Invalid uses of <code>CAP</code>.
  </test>

  <test id="inc1" type="run" file="HOTBuiltinINC1.Mod">
    <code>INTEGER</code> <code>INC()</code> by a constant value.
  </test>
  <test id="inc2" type="run" file="HOTBuiltinINC2.Mod">
    <code>INTEGER</code> <code>INC()</code> by a <code>SHORTINT</code>
    variable. 
  </test>


</testcases>


<testcases
    profile="Known and fixed bugs"
    default-lang="O1 O2 AO">

    <test id="bug0" type="run" file= "HOTBug0.Mod" ></test>
    <test id="bug1" type="accept" file= "HOTBug1.Mod" >
    	OP2/ETHOberon
        saving and restoring temporary values on the stack. Restore used to pop integers as 32-bit, 
        thus making the stack inconsistent.
    </test>
    <test id="bug2" type="run" file= "HOTBug2.Mod" >
    	OP2/ETHOberon
    	Integers on the stack... troubles ahead
    </test>
    <test id="bug3" type="reject" file= "HOTBug3.Mod" >
    	NEW without parameters
    </test>

</testcases>


<testcases
    profile="Dialects: Dynamic Arrays"
    default-lang="">

    <test id="dynarr0" type="run" file= "HOTDynArr0.Mod" lang="O2 AO" >
        dynamic arrays
    </test>

    <test id="dynarr2" type="error" file="HOTDynArr2.Mod" lang="O2 AO" >
      Tries to create an array of negative length.
    </test>

</testcases>


<testcases
    profile="Dialects"
    default-lang="">

  <test id="tbproc1" type="reject" lang="O2" file="HOTTbProc1.Mod">
    Defines a type-bound procedure <code>P</code> on the extended type
    <em>before</em> defining a procedure of the same name for the base
    type.
  </test>

    <test id="for0" type="run" file= "HOTFor0.Mod" lang="O2 AO" >
        for statement
    </test>

  <test id="retrec1" type="run" file= "HOTRetRec1.Mod" lang="AO" >
        procedure returning a record
    </test>

    <test id="aoMethodError0" type="reject" file= "HOTMethodError0.Mod" lang="AO" >
        method overriding with different signature
    </test>
    <test id="aoMethodError1" type="reject" file= "HOTMethodError1.Mod" lang="AO" >
        method overriding with different signature
    </test>
    <test id="aoMethodError2" type="reject" file= "HOTMethodError2.Mod" lang="AO" >
        method overriding with different signature
    </test>
    <test id="aoMethodError3" type="reject" file= "HOTMethodError3.Mod" lang="AO" >
        method overriding with different signature
    </test>


</testcases>


<testcases
    profile="Informal tests"
    default-lang="O1 O2 AO">

    <test id="sysarr0" type="run" relevance="informal" file= "HOTSysArr0.Mod" >
        ARRAY OF SYSTEM.BYTE
    </test>
    
    <test id="specialCast0" type="reject" relevance="informal" file= "HOTSpecialCast0.Mod" >
        cast PTR to POINTER TO ARRAY 5 OF CHAR
        a dynamic array has no type descriptor, this is not possible
    </test>
    
    <!--
        export can get be tricky when using hidden or anonymous structures. Type aliasing and reexport
        make the problem even worse.
    -->
    <test id="specialexport0" type="accept" relevance="informal" file= "HOTSpecialExport0.Mod" ></test>
    <test id="specialexport0a" type="accept" relevance="informal" file= "HOTSpecialExport0A.Mod" ></test>
    <test id="specialexport0b" type="run" relevance="informal" file= "HOTSpecialExport0B.Mod" ></test>

    <!--
        'nightmare' bug in OP2 for ETH Oberon. Exporting a type that was previously exported as record
        created ghost structures and made the compiler crash
    -->
    <test id="specialexport1export " type="accept" relevance="informal" file= "HOTSpecialExport1.Mod" ></test>
    <test id="specialexport1import " type="accept" relevance="informal" file= "HOTSpecialExport2.Mod" ></test>
    <test id="specialexport1A" type="accept" relevance="informal" file= "HOTSpecialExport1.A.Mod" ></test>
    <test id="specialexport2A" type="accept" relevance="informal" file= "HOTSpecialExport2.A.Mod" ></test>
    <test id="specialexport1B" type="accept" relevance="informal" file= "HOTSpecialExport1.B.Mod" ></test>
    <test id="specialexport2B" type="reject" relevance="informal" file= "HOTSpecialExport2.B.Mod" ></test>

    <test id="sysBuiltin0" type="run" relevance="informal" file= "HOTSysBuiltIn0.Mod" >
    </test>

    <test id="duplicateFingerprint" type="accept" relevance="informal" file= "HOTDuplFP.Mod" >
        OP2/ ETH Oberon
        this module generates duplicate fingerprints 
    </test>

</testcases>

