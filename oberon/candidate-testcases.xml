<?xml version="1.0" encoding="ISO-8859-1"?>

<testcases profile="Candidate Testcases"
	   default-lang="O1 O2 AO">
  <test id="ash1" type="run" file="HOTBuiltinASH1.Mod"
	output="HOTBuiltinASH1.Ref">
    Inspects output of <code>ASH</code> with positive and negative
    arguments, including some pathological cases.
  </test>
  
  <test id="ash2" type="reject" file="HOTBuiltinASH2.Mod">
    Invalid uses of <code>ASH</code>.
  </test>

  <test id="cap1" type="run" file="HOTBuiltinCAP1.Mod">
    Tests <code>CAP</code> over the whole ASCII range, that is, for
    the character codes <code>0..127</code>.  Except for
    <code>a..z</code>, all characters should be mapped onto
    themselves.
  </test>
  
  <test id="cap2" type="run" file="HOTBuiltinCAP2.Mod">
    Tests <code>CAP</code> over the whole ISO Latin1 range
    <code>0..127</code>.  Except for characters that have a
    corresponding upper case letter in ISO Latin1, all characters
    should be mapped onto themselves.
  </test>

  <test id="cap3" type="reject" file="HOTBuiltinCAP3.Mod">
    Invalid uses of <code>CAP</code>.
  </test>

  <test id="inc1" type="run" file="HOTBuiltinINC1.Mod">
    <code>INTEGER</code> <code>INC()</code> by a constant value.
  </test>

  <test id="inc2" type="run" file="HOTBuiltinINC2.Mod">
    <code>INTEGER</code> <code>INC()</code> by a <code>SHORTINT</code>
    variable. 
  </test>


  <test id="const1" type="run" file="HOTConst1.Mod">
    Tests various representations of the integer constant
    <code>127</code>.  If this test fails, then the compiler works
    with typed integer constants internally.  Note: The test assumes
    that <code>MAX(SHORTINT)=127</code>.
  </test>

  <test id="const2" type="accept" lang="O2 AO" file="HOTConst2.Mod">
    OOC: Tests evaluation of constant expressions involving
    <code>LEN()</code>.
  </test>


  <test id="array1" type="run" file="HOTArray1.Mod">
    Declares an array type of length zero, and a variable of this type.
  </test>

  <test id="array2" type="reject" file="HOTArray2.Mod">
    Declares an array type of negative length.
  </test>

  <test id="dynarr1" type="run" file="HOTDynArr1.Mod">
    Creates an array of length zero on the heap.
  </test>

  <test id="dynarr2" type="error" file="HOTDynArr2.Mod">
    Tries to create an array of negative length.
  </test>


  <test id="tbproc1" type="reject" lang="O2" file="HOTTbProc1.Mod">
    Defines a type-bound procedure <code>P</code> on the extended type
    <em>before</em> defining a procedure of the same name for the base
    type.
  </test>

  <test id="with1" type="accept" lang="O1 O2 AO" file="HOTWITH1.Mod">
    Recursive call to a procedure from within a <code>WITH</code>
    statement.  At the place of the call, the <code>WITH</code> is
    applied to the procedure's argument.  Compilers that modify the
    external signature of the procedure for the duration of a
    <code>WITH</code> guard reject this test.
  </test>

  <test id="procvar1" type="accept" lang="O1 O2 AO" file="HOTProcVar1.Mod">
    If this test passes, then the compiler applies the same relaxed
    type rules to the comparison of procedure values as to the
    assignment of procedure values.
  </test>

  <!-- added 2001/04/27 -->
  <test id="tbproc2" type="reject" lang="O2" file="HOTTbProc2.Mod">
    Defines a type-bound procedure <code>P</code> on a record type,
    although an <em>extension</em> of this base type has already
    defined a field of the same name.  This leads to a name clash for
    the derived type.
  </test>

</testcases>
