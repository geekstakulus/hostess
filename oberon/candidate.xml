<?xml version="1.0" encoding="ISO-8859-1"?>

<testcases profile="Candidate Testcases"
	   default-lang="O1 O2 AO">

    <test id="array1" type="run" relevance="informal" file="HOTArray1.Mod">
      Declares an array type of length zero, and a variable of this type.
    </test>

    <test id="dynarr1" type="run" relevance="informal" file="HOTDynArr1.Mod" lang="O2 AO" >
      Creates an array of length zero on the heap.
    </test>
  
  <!-- added 2001/04/27 -->
  <test id="tbproc2" type="reject" lang="O2" file="HOTTbProc2.Mod">
    Defines a type-bound procedure <code>P</code> on a record type,
    although an <em>extension</em> of this base type has already
    defined a field of the same name.  This leads to a name clash for
    the derived type.
  </test>

  <!-- added 2001/04/27 prk -->
  <test id="varpar0" type="run" file= "HOTVarPar0.Mod">
     Accessing global variables passed as var-parameters
  </test>

  <!-- added 2001/04/27 prk -->
  <test id="indirectexport0" type="accept" file="HOTIndExport0.Mod" lang="AO">
     Export a type indirectly through another type
  </test>

  <!-- added 2001/04/27 prk -->
  <test id="indirectimport0" type="run" file="HOTIndImport0.Mod" lang="AO">
     Import type exported indirectly (companion to indirectexport0)
  </test>

  <!-- added 2001/05/09 prk -->
  <test id="delegates0" type="run" file="HOTDelegates0.Mod" lang="AO">
     Test the implementation of the Active Oberon Delegates (method
     and procedure unified in one single type)
  </test>

  <!-- added 2001/05/16 prk -->
  <test id="recerr9" type="reject" file="HOTRecErr9.Mod.Mod" >
     Field shadowing in a record extension not allowed, because in a
     module all fields are visible.
  </test>

  <!-- added 2001/05/17 prk -->
  <test id="proc6" type="run" file= "HOTProc6.Mod" >
     test "=" and "#" operators on procedure variables
  </test>

  <!-- added 2001/06/04 mva -->
  <test id="export2" type="reject" relevance="informal" file= "HOTExport2.Mod">
    Compile a module that calls itself <code>SYSTEM</code>.  The
    compiler should probably reject this module, although it is also
    sufficient if it never uses this module in the place of the
    predefined <code>SYSTEM</code> module.
  </test>
  <test id="export3" type="accept" file= "HOTExport3.Mod">
    The predefined module <code>SYSTEM</code> takes precedence over
    any other module.  This test imports <code>SYSTEM</code> and
    checks that it does not get the module from the previous test
    case.
  </test>
  <test id="import1" type="reject" file= "HOTImport1.Mod">
    Module imports itself.  No symbol file of the given name exists.
  </test>
  <test id="import2" type="accept" file= "HOTImport2.Mod">
    Empty module, setting the stage for the next test.
  </test>
  <test id="import2a" type="reject" file= "HOTImport2.A.Mod">
    Module imports itself.  A symbol file of the given name exists.
  </test>
  <test id="import3" type="accept" file= "HOTImport3.Mod">
    The module name is not known within the module itself, and can be
    used by declarations.
  </test>

  <!-- added 2001/08/30 mva -->
  <test id="typetest0" type="error" file= "HOTTypeTest0.Mod">
    Applies a type-test to <code>NIL</code>.
  </test>
  
  <test id="typetest1" type="error" file= "HOTTypeTest1.Mod">
    Applies a type-guard an rvalue of <code>NIL</code>.
  </test>
  
  <test id="typetest2" type="error" file= "HOTTypeTest2.Mod">
    Applies a type-guard an lvalue of <code>NIL</code>.  Note: I'm not
    sure that applying a type guard to the target of an assignment
    makes sense, but it is not illegal as far as I know.
  </test>
</testcases>
